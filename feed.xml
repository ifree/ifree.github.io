<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Programming for fun!</title>
<subtitle type="text">Just can't help chasing your beauty</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://programming4fun.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://programming4fun.com" />
<updated>2014-02-19T02:54:55+08:00</updated>
<id>http://programming4fun.com/</id>
<author>
  <name>Frei Zhang</name>
  <uri>http://programming4fun.com/</uri>
</author>


<entry>
  <title type="html"><![CDATA[breakpad on android]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/android/dev/2014/02/13/breakpad-on-android" />
  <id>http://programming4fun.com/blog/android/dev/2014/02/13/breakpad-on-android</id>
  <published>2014-02-13T00:00:00+08:00</published>
  <updated>2014-02-13T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
最近给项目集成了 &lt;a href=&quot;https://code.google.com/p/google-breakpad&quot;&gt;breakpad&lt;/a&gt;, 一款开源 crash report 系统. 对 crash 捕获, dump 数据生
成, dump 文件分析, 还有 dump 文件上传,都有很好的支持. 据我所知, firefox,
chromium 等项目都集成了它. 从官方文档上看, 此项目对 linux 的支持也只是有限,
android 的话就更有限了. 不过即便是有限的支持, 对于我们的项目来说已经足够了. 现在
我来介绍一下我的经验. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;breakpad 介绍&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
其实说到这里, 你应该也大概知道 Breakpad 是什么东西了, 他是一个跨平台的 crash
report system. 
&lt;/p&gt;

&lt;p&gt;
现代的操作系统能良好的隔离每个程序的内存空间. 如果一个程序崩溃了,操作系统同样正常
运行. 各个平台有独自的程序生命周期管理. 拿 linux 来说, 如果一个程序胡作非为, 操作
系统看不下去了便给他一个信号eg. SIGKILL. 那意味着它就死了. 这时操作系统就像一个末
日审判让你无法与他对抗. 扯远了, 其实主要操作就是 handle 程序crash 的信号, 然后生
成平台无关的 dump 文件. 有了这个 dump 文件, 你就可以对分析,改进自己的程序. 正好
android 内核也是 linux, 那么 breakpad 在 android 下同样可以工作.
&lt;/p&gt;

&lt;p&gt;
Breakpad 还有 dump 文件解析功能, 同时提供了 &lt;code&gt;minidump_stackwalk&lt;/code&gt; 这个工具来分析
dump 文件.  &lt;code&gt;minidump_stackwalk&lt;/code&gt; 能结合程序的 symbol 文件打印出程序 crash 时的详细
调用堆栈, 这对分析,调试有很大帮助.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;集成过程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
从源码 checkout 之后,我就准备了两种解决方案, 一种是编进我们的的代码. 另一种是在
andoird 下直接运行 &lt;code&gt;minidump_stackwalk&lt;/code&gt;. 由于我们项目内存管理的复杂性和性能需要, 没
有链接部分 breakpad 的库且编译选项有冲突, 再加上我们项目的内存管理方式等因素, 让
我放弃了集成 breakpad 代码到项目中的想法. 于是我就又交叉编译了
&lt;code&gt;minidump_stackwalk&lt;/code&gt;. 项目已经开源, 地址:
&lt;a href=&quot;https://github.com/ifree/Breakpad-android&quot;&gt;https://github.com/ifree/Breakpad-android&lt;/a&gt; .
&lt;/p&gt;

&lt;p&gt;
项目依赖 google-breakpad 请移步项目 svn 检出最新源码. &lt;code&gt;tools/android.patch&lt;/code&gt; 是我
对 breakpad 做出的改动.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;交叉编译&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
如果需要交叉编译 &lt;code&gt;minidump_stackwalk&lt;/code&gt; 请看 &lt;code&gt;tools/ndk-configure.sh&lt;/code&gt;, 只需指定
ndk 路径, 处理器架构. 编译之前检查下脚本, 以防万一.
&lt;/p&gt;

&lt;p&gt;
编译完成你应该能得到 &lt;code&gt;$google-breakpad-path/src/processor/minidump_stackwalk&lt;/code&gt;,我也
编译好了一个, 你可以直接使用. 不过有一点需要补充, 这是修改版的
&lt;code&gt;minidump_stackwalk&lt;/code&gt;. 使用示例参见 &lt;code&gt;com.ifree.breakpad.BreakpadAgent&lt;/code&gt;, 原理是使用
java 执行 &lt;code&gt;minidump_stackwalk&lt;/code&gt; , 并读取输出流.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;集成代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
关于集成代码, 参见 BreakpadAgent.java 方法 &lt;code&gt;public native void
getBacktrace(String dumpFile,String symbolPath);&lt;/code&gt;, 本地主要实现
&lt;code&gt;jni/BreakpadAgent.cpp&lt;/code&gt;. 代码量没有多少.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;ls ~/Dev/projects/Breakpad-android/jni&amp;#57344;&amp;#57345;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Android.mk&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Application.mk&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;BreakpadAgent.cpp&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;BreakpadHelper.cpp&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;BreakpadHelper.h&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;minidump&lt;sub&gt;stackwalk&lt;/sub&gt;.cc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
你可能需要注意这些东西:
&lt;/p&gt;

&lt;p&gt;
复制 &lt;code&gt;tools/Android_processor.mk&lt;/code&gt; 到
&lt;code&gt;$google-breakpad-path/android/google_breakpad/Android_processor.mk&lt;/code&gt; 并在项目 mk
文件中 include 它, 具体例子参看 &lt;code&gt;jni/android.mk&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
请看 BreakpadHelper 的方法 &lt;code&gt;bool backtrace(const char*,const
char*,File_exists_handler,File_read_handler,Free_memory_handler)&lt;/code&gt; 如果这三个
handler 为空的话, 会尝试读取 sd 卡上的 symbol 文件, 在 BreakpadAgent.cpp 中, 我实
现了 ndk 对 android assets 目录资源的读取, 如果你想项目没有什么特殊需求的话, 推荐
用它们.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;遇到的坑&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
android 中, jni 只允许创建一个 jvm, 且不能共享 JNIEnv, 必须共享 JVM.
&lt;/p&gt;

&lt;p&gt;
java 的泛型擦除与 jni. jni 在调用 java 方法时, 需要指定方法,类签名, 但是泛型会被
擦除, 在 jvm 下, 泛型是个幌子而已, 具体请看 core java v7 vol1 中关于泛型的描述.
&lt;/p&gt;

&lt;p&gt;
编译项目 jni 目录之外的文件. 这个说来话长, &lt;code&gt;ndk-build&lt;/code&gt; 会根据当前 &lt;code&gt;LOCAL_PATH&lt;/code&gt; 来
搜索文件, 所以经常会遇到各种错误. 需要重设 &lt;code&gt;LOCAL-PATH&lt;/code&gt; 来解决, 但是如果项目过于
复杂, 这种方法不可取. 简单的方法是 新建 mk 文件, 参考我的 &lt;code&gt;Android_processor.mk&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
android 创建进程时, 如果进程有大量的输出流发送到 &lt;code&gt;stdout&lt;/code&gt; 的话, 会造成 android 挂
起. 解决办法是, 读取进程的输出流.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
匆忙的整理完这个工具, 没有太详细的注释, 不过代码应该还是清晰的, 具体使用方法也可
以看测试 app. 希望能对你有所帮助. 有问题或者 bug 欢迎给我 issue.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/android/dev/2014/02/13/breakpad-on-android&quot;&gt;breakpad on android&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on February 13, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[doubanfm html5]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/dev/2014/01/21/doubanfm-html5" />
  <id>http://programming4fun.com/blog/dev/2014/01/21/doubanfm-html5</id>
  <published>2014-01-21T00:00:00+08:00</published>
  <updated>2014-01-21T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
大家都知道 flash player 在 *nix 平台上的表现有多糟, 一打开 douban fm 风扇就开始狂
转, 这阵势就像要把我 CPU 献祭一样, 我是不能容忍它的. 于是, 我造了这个轮子&amp;#x2013; 写了
dobanfm 的 html5 版. &lt;a href=&quot;https://github.com/ifree/doubanfm-html5&quot;&gt;项目地址&lt;/a&gt;, &lt;a href=&quot;http://userscripts.org/scripts/show/292624&quot;&gt;userscript&lt;/a&gt; . 下面是我这个业余 js 开发人员的一些开
发记录. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;js 开发环境配置&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
首先, 这个配置是基于我的默认编辑器 emacs 的, 所以肯定有一些读者没有考虑到(也许我
的博客根本没人看,笑)
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;major-mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Js2Mode&quot;&gt;js2-mode&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
emacs 自带了 javascript-mode , 这个模式提供了主要的语法高亮和基本的缩进. 用来看代
码是足够了. 如果想更畅快的编辑写代码, 推荐使用 js2-mode . 它可是算是最好的
javascript 模式了. js 1.5 - 1.8 都支持, 而且支持 &lt;a href=&quot;http://en.wikipedia.org/wiki/ECMAScript_for_XML&quot;&gt;e4x&lt;/a&gt; , 代码折叠, 也有更智能的缩
进. 还有很多 feature 没有介绍, 就留给你来发掘了. 
&lt;/p&gt;

&lt;p&gt;
如果你是 &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; 开发者的话, 可以考虑 &lt;a href=&quot;https://github.com/thomblake/js3-mode&quot;&gt;js3-mode&lt;/a&gt; , 兼容 js2-mode, 同时提供 &lt;a href=&quot;https://github.com/npm/npm/blob/master/doc/misc/npm-coding-style.md&quot;&gt;npm-styl&lt;/a&gt;e 支
持. npm-style 看起来确实不错, 但是我不是专职的 js 开发人员, 所以还是照
&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml&quot;&gt;google-js-style&lt;/a&gt; 来吧.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;minor-mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Yasnippet&quot;&gt;yasnippets&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
主流的 IDE 都会有代码段自动补全功能, emacs 自然不会落下. yasnippets 就是emacs 下
的一个强大的补全工具, 代码段模板兼容 TextMate 的模板语法.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Flycheck&quot;&gt;flycheck&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
这是 emacs 上取代 flymake 的一个实时代码检查工具 (check your code on the fly). 配
合 &lt;a href=&quot;http://en.wikipedia.org/wiki/JSLint&quot;&gt;jslint&lt;/a&gt; 可以随时让我知道那里的代码有问题, 减少调试时间. jslint 是 js 开发者必不
可少的代码规范检查工具, 大家使用 jslint 一般可能会用 make file (现在一般用 &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;) 定义一个 lint 的
target, 这个属于 post checking. flycheck 则可以让你做到 realtime checking, 多爽!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Projectile&quot;&gt;projectile&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;p&gt;
作为一个轻量的项目文件管理工具, projectile 是我最喜欢用的. 没有第三方依赖, 提供大
部分项目文件管理功能: 浏览, 快速查找, 最近使用文件列表, 文件跳转, 项目切换, 项目
tags 文件生成,等. 如果你的需求更加复杂, 请移步 &lt;a href=&quot;http://www.emacswiki.org/emacs/EmacsCodeBrowser&quot;&gt;ECB&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-4&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/AutoComplete&quot;&gt;AutoComplete&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-4&quot;&gt;
&lt;p&gt;
自动补全功能是现代 IDE 的一大杀器, 通过静态分析, 语法树解析, tags等手段来补全代码
让程序员的效率大大提升. AutoComplete 模式可以利用 js2 的语法上下文来补全, 也可以
根据当前关键字来补全, 这样让 emacs 一点也不逊色与那些 IDE 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-5&quot;&gt;&lt;a href=&quot;https://github.com/skeeto/skewer-mode&quot;&gt;skewer&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-5&quot;&gt;
&lt;p&gt;
最后献上必杀技 skewer-mode , 它简直就是为 javascript 快速开发的而生的. 真是即写即
所得. 它通过 &lt;a href=&quot;https://github.com/skeeto/emacs-http-server&quot;&gt;simple-httpd&lt;/a&gt; 做后端并使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Comet_%2528programming%2529&quot;&gt;comet&lt;/a&gt; 技术来进行 http 长连接实现推送
代码到浏览器并获得执行结果. 所以, 你在写代码的时候可以立即验证自己的代码. 想了解
更多 comet 可以看看我以前翻译的&lt;a href=&quot;http://ifree.is-programmer.com/2010/11/2/websockets_everywhere_with_socket-io.22344.html&quot;&gt;文章&lt;/a&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;js 代码风格,注意事项&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
一般我的代码会通过 flycheck 和 jslint 配合, 所以风格应该不会有太大的问题. 现在说
说 jslint 吧. 就像c &lt;a href=&quot;http://en.wikipedia.org/wiki/Lint_%2528software%2529&quot;&gt;lint&lt;/a&gt; 一样这是一种代码风格检查工具. 它会发现你代码的潜在漏洞,
让你不至于写出太多漏洞的代码. 不过需要提到的是, lint 虽好, 自己没有写好代码的意识
的话, 没用. jslint 的规则主要参照&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;这里&lt;/a&gt; 的代码约定. 可能有时候你可能觉得它太严格了.
没问题, 你可以让它容忍一些代码风格. 其他的介绍看&lt;a href=&quot;http://www.jslint.com/lint.html&quot;&gt;这里&lt;/a&gt; . 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;svg 相关&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
从源码看你知道 UI 部分是用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;svg&lt;/a&gt; 画的, 作为一个 web UI 门外汉来说, svg/&lt;a href=&quot;http://en.wikipedia.org/wiki/Vector_Markup_Language&quot;&gt;vml&lt;/a&gt; 无疑解救
了我. 以前我还用 IE 的时候知道了 vml , 对这种不用关心各种怪异的 css/js bug,直接用
xml 来描述的语言真是很向往,进而流连于各种 vml webart 中.后来 vml 过时了,哈哈. 取
而代之的是 svg, webkit 系, netscape 系的都有很好的支持, 所以大概了解了一下. 你可
以把他们看作是一种图形描述语言. 因为可以描述, 所以无论怎么缩放图像质量也不会变差.
我通过 &lt;a href=&quot;http://en.wikipedia.org/wiki/Inkscape&quot;&gt;inkspace&lt;/a&gt; 照这 doubamfm 拖了个大概, 然后用 javascript 访问其 dom, 很像
html 的 dom, 所以代码写起来也不是很麻烦. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
这个项目是我利用业余时间写好的, 花了两个晚上, 用 inkscape 画界面是最折腾我的,
Orz. 其余时间就是看 web audio 文档, 和研究 douban 协议. 我没有实现 volume
control 是因为那东西比较难画, 功能实现不是太难. 还有一个就是登陆, 我也不想画界面
了, 如果谁想忙帮的话, 欢迎 pull request. 另外就是 vip 用户的功能, 我没有开通
vip, 所以没时间研究. 有什么问题的话也可以直接在项目上开 issue.
&lt;/p&gt;

&lt;p&gt;
匆匆忙忙写好了这篇博文. 还是再说几句. 日常开发时, 要对自己的要求稍微严格一点. 对
于工具要善于利用, 对于本来时间就不多的大家来说这是很宝贵的. 做好项目计划, 不管是
正式项目还是业余项目, 细分目标. 如果像以前, 这个项目不知道又要到何年何月才写的
完&amp;#x2026; 好了,洗洗睡了.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/dev/2014/01/21/doubanfm-html5&quot;&gt;doubanfm html5&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on January 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GTD with org-mode]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/emacs/2014/01/08/gtd-with-org" />
  <id>http://programming4fun.com/blog/emacs/2014/01/08/gtd-with-org</id>
  <published>2014-01-08T00:00:00+08:00</published>
  <updated>2014-01-08T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
随着工作越来越忙,平常的琐事越来越多,我发现,制订计划的需求就越来越高.现
在网络上有许多 GTD 工具, 我也陆续使用过一些,比如说 anydo, remember the
milk&amp;#x2026; 最后我都放弃了. 他们之中, 也不乏亮点, 可是对我来说最大的硬伤就
是粘度不高. 我不可能一直记得来打开这些应用, 大脑在频繁的任务切换下也不
会有太高的效率. 由于我的主要工作环境是 emacs, 它几乎常驻在于我这个用户
的session 里, 于是, 在去年我开始在 emacs 的 org-mode 下做 GTD. 一直到现
在, org-mode 帮助我完成了一个又一个目标, 我现在把自己的一些心得分享一下,
希望能帮助到你. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;org-mode 介绍&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
org-mode 是 emacs 下的一个纯文本模式. 由于高度自由且容易扩展, 可以用作
TODO list, 项目计划工具, 写作工具等等. 通常我用它来写文档,记笔记,做计划,
还有就是写博客. 
&lt;/p&gt;

&lt;p&gt;
现在我介绍一些 org-mode 的基础知识,以便你能快速入门, 想要更深入的了解,
多看看&lt;a href=&quot;http://orgmode.org/#docs&quot;&gt;文档&lt;/a&gt;吧, org-mode 的文档还是比较丰富的.  
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;基本操作&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
为了更高效的编辑 org 文件, 请忘掉你的鼠标, 避免工具的切换浪费时间.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;heading 相关&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;键位&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-&amp;lt;left&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;插入一个同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;插入一个非同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-&amp;lt;let&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;增加当前 heading 的级别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-&amp;lt;right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;减少当前 heading 的级别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-s-&amp;lt;left&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;增加当前 heading 及其子项的级别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-s-&amp;lt;right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;减少当前 heading 及其子项的级别&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;移动&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;键位&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-p&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到上一个 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-n&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到下一个 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-f&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到上一个同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-b&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到下一个同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-u&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到上一级 heading&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;code&gt;TODO&lt;/code&gt; 相关&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;键位&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-t&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使一个 heading 成为 TODO&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;s-&amp;lt;left&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切换当前 TODO 项到下一个状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;s-&amp;lt;right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切换当前 TODO 项到上一个状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;S-M-&amp;lt;ret&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;添加一个 TODO 项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;用 org-mode 来做 GTD&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
上面就是我经常用到的 org-mode 命令, 现在我们说说我平时是怎么做 GTD 的.
我把我每天要做的事情分成几类, 工作, 生活, 学习, 和一个优先级最高, 或者
马上可以完成的类型 (today.org). 目录结构大致如下:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(directory-files &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;~/Dev/Projects/org/plan&quot;&lt;/span&gt; t &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\.org$&quot;&lt;/span&gt;)&amp;#57344;&amp;#57345;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;/Users/ifree/Dev/Projects/org/plan/dev.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/Users/ifree/Dev/Projects/org/plan/math.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/Users/ifree/Dev/Projects/org/plan/personal.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/Users/ifree/Dev/Projects/org/plan/reading.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/Users/ifree/Dev/Projects/org/plan/today.org&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
为了方便查找, 统计, 我用到了 TODO 关键字和 tag 来分类, 这让我很容易就能
定位到具体任务. 你可以看到, 任务关键字我分了3类 普通任务, coding 和任务
状态,关键字也进行了分组, 你可以根据自己的喜好或者计划来定制它.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;org-todo-keywords&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-todo-keywords&amp;#57344;&amp;#57345;&amp;#57345;
      (quote ((sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;TODO(t)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;STARTED(s)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;DONE(d!/!)&quot;&lt;/span&gt; )&lt;span style=&quot;color: #ff4500;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;general tasks&lt;/span&gt;&amp;#57344;&amp;#57345;&amp;#57345;
              (sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CODING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;TESING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REFACTOR(!/@)&quot;&lt;/span&gt;  &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REVIEW(/@)&quot;&lt;/span&gt;)&lt;span style=&quot;color: #ff4500;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;coding&lt;/span&gt;&amp;#57344;&amp;#57345;
              (sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;WAITING(w@/!)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SOMEDAY(S)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;PROJECT&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;DELEGATED(@/)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CANCELLED(c@/!)&quot;&lt;/span&gt;))))&lt;span style=&quot;color: #ff4500;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;task states&lt;/span&gt;&amp;#57344;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;org-tag-alist&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-tag-alist &#39;((&lt;span style=&quot;color: #b0c4de;&quot;&gt;:startgroup&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;@work&quot;&lt;/span&gt; . ?w) &amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;@home&quot;&lt;/span&gt; . ?h)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;@coffee shop&quot;&lt;/span&gt; . ?t)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #b0c4de;&quot;&gt;:endgroup&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #b0c4de;&quot;&gt;:startgroup&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;laptop&quot;&lt;/span&gt; . ?l)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;pc&quot;&lt;/span&gt; . ?p)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;phone&quot;&lt;/span&gt; .?P)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #b0c4de;&quot;&gt;:endgroup&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #b0c4de;&quot;&gt;:startgroup&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;dev&quot;&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;personal&quot;&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;blog&quot;&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;thought&quot;&lt;/span&gt; .nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      (&lt;span style=&quot;color: #b0c4de;&quot;&gt;:endgroup&lt;/span&gt; . nil)&amp;#57344;&amp;#57345;&amp;#57345;
                      ))&amp;#57344;&amp;#57345;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
读到了这里, 你可能会想, 这是很基本的 GTD 功能啊, 我凭什么用 org-mode !
别急, 我现在介绍两个杀手级的 feature, 保证让你爱不释手. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;agenda view&lt;/b&gt; 相当于是一个灵活的统计,图表工具, 可以非常灵活的定制, . 来看
看我的配置,大致有3个功能. 你可以根据需要, 自己加, 记住 &lt;b&gt;RTFM&lt;/b&gt;.
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;查看今天需要完成的任务
&lt;/li&gt;
&lt;li&gt;没有完成的任务
&lt;/li&gt;
&lt;li&gt;存档的任务
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-agenda-custom-commands&amp;#57344;&amp;#57345;&amp;#57345;
      &#39;((&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;c&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;things I should today&quot;&lt;/span&gt; alltodo &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;#57344;&amp;#57345;&amp;#57345;
         ((org-agenda-overriding-header &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;Hey man, you need finish these today!&quot;&lt;/span&gt;)&amp;#57345;
          (org-agenda-files &#39;(&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;~/Dev/Projects/org/plan/today.org&quot;&lt;/span&gt;))))&amp;#57344;&amp;#57345;&amp;#57345;
        (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;p&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;pending todo&quot;&lt;/span&gt; todo &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;WAITING|SOMEDAY&quot;&lt;/span&gt;)&amp;#57344;&amp;#57345;&amp;#57345;
        (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;view archieved task&quot;&lt;/span&gt; todo &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CANCELLED|DELEGATED|DONE&quot;&lt;/span&gt;&amp;#57344;&amp;#57345;&amp;#57345;
         ((org-agenda-files (directory-files-rec &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;~/Dev/Projects/org&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\.archive$&quot;&lt;/span&gt;))))))&amp;#57344;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
除了灵活的统计视图, org-mode 还能让你快速的记录自己任务, 当然, 这不限于
任务, 也可以是偶然获得的灵感, 事件记录等. 这便是 &lt;code&gt;org-capture&lt;/code&gt; 功能. 同时也贴上我的配置:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-capture-templates&amp;#57344;&amp;#57345;&amp;#57345;
      &#39;((&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;t&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;Today&#39;s TODO&quot;&lt;/span&gt; entry (file+headline org-default-notes-file &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&amp;#27599;&amp;#26085;TODO!&quot;&lt;/span&gt;)&amp;#57344;&amp;#57345;
         &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;** TODO %?\n %i\n %T&quot;&lt;/span&gt;)&amp;#57344;&amp;#57345;&amp;#57345;
        (&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;T&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;Thoughts&quot;&lt;/span&gt; entry &amp;#57344;&amp;#57345;&amp;#57345;
         (file+headline (concat org-directory &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;/plan/personal.org&quot;&lt;/span&gt; ) &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;random thoughts&quot;&lt;/span&gt;)&amp;#57344;&amp;#57345;
         &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;** %?\n %i\n %T&quot;&lt;/span&gt;)))&amp;#57344;&amp;#57345;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;彩蛋!&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
以上就是 org-mode 做 GTD 的基本配置, 我来说说我发现的彩蛋吧, 很方便. 
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;task change logging
任务状态改变之后( TODO -&amp;gt; DELEGATED), 你可以加上一个时间戳或者加一段note
看下面  &lt;code&gt;!&lt;/code&gt; 就是时间戳, &lt;code&gt;@&lt;/code&gt; 就是note. &lt;code&gt;/&lt;/code&gt; 来区分状态的前后.

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CODING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;TESING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REFACTOR(!/@)&quot;&lt;/span&gt;  &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REVIEW(/@)&quot;&lt;/span&gt;)&amp;#57344;&amp;#57345;&amp;#57345;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;checkboxes
  &lt;code&gt;M-S-&amp;lt;RET&amp;gt;&lt;/code&gt; 插入 checkbox
&lt;/li&gt;
&lt;li&gt;archive 
  &lt;code&gt;C-c C-x C-s&lt;/code&gt; 存档当前条目
&lt;/li&gt;
&lt;li&gt;agenda view
  &lt;code&gt;M-x org-agenda&lt;/code&gt; 一般绑定键位为 &lt;code&gt;C-a a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;priorities
每个 TODO 都可以设置优先级 快捷键 &lt;code&gt;S-&amp;lt;UP&amp;gt;&lt;/code&gt; &lt;code&gt;S-&amp;lt;DOWN&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;deadline, schedule &amp;#x2026;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
先这么多吧, 够你看一会的了. 用 emacs 不需要死记硬背, 这些 tricks 你会慢
慢知道的. 记住, tricks 不是银弹.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;后记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
工具再好, 缺乏执行力也是徒劳. 工具的作用是辅助你来完成计划, 需要你的主
观能动配合, 如果这一步都迈不出去的话, 洗洗睡吧.
&lt;/p&gt;

&lt;p&gt;
祝你战胜自己!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/emacs/2014/01/08/gtd-with-org&quot;&gt;GTD with org-mode&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on January 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[New Start]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/daily/2013/12/24/new-start" />
  <id>http://programming4fun.com/blog/daily/2013/12/24/new-start</id>
  <published>2013-12-24T00:00:00+08:00</published>
  <updated>2013-12-24T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
在挣扎了许久之后,我终于又重建了博客. 在这之前,我尝试过 &lt;a href=&quot;http://ifree.is-programmer.com&quot;&gt;is-programmer&lt;/a&gt;,
&lt;a href=&quot;http://ifree.cnblogs.com/&quot;&gt;cnblogs&lt;/a&gt;, 但是最后统统烂尾. 中断博客的原因是因为我觉得自己胸无点墨, 写作
技能又笨拙, 继续写下去很丢面子. 进而选择了本地博客,本地 wiki 来做笔记,
记录思想. 可是在一次意外中, 由于我的疏忽, 丢失了硬盘的所有资料. 我开始
尝试一些云端解决方案, 比如 dropbox, evernote, gdrive, 加上这两年痴迷于
emacs, 所以我用 emacs 的 org-mode 来做日常的记录, 通过 dropbox 同步. 再
后来, 也就是现在, 我决定摆脱伸手党这个称谓, 把自己的思考和别人分享, 接
受批评, 共同进步.&lt;!-- break --&gt;
&lt;/p&gt;

&lt;p&gt;
本博客是基于 jekyll 静态博客, 使用 &lt;a href=&quot;https://github.com/ColeTownsend/Balzac-for-Jekyll&quot;&gt;BALZAC&lt;/a&gt; theme 并做了一些小修改. 博
客内容主要是游戏编程,c/c++ , unix like system, emacs 和函数式编程相关的
内容. 
&lt;/p&gt;

&lt;p&gt;
2013年就要过去, 希望在新的一年里活的开心!
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/daily/2013/12/24/new-start&quot;&gt;New Start&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on December 24, 2013.&lt;/p&gt;</content>
</entry>

</feed>
