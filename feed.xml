<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Programming for fun!</title>
<subtitle type="text">Just can't help chasing your beauty</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://programming4fun.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://programming4fun.com" />
<updated>2014-10-05T12:01:30+08:00</updated>
<id>http://programming4fun.com/</id>
<author>
  <name>Frei Zhang</name>
  <uri>http://programming4fun.com/</uri>
</author>


<entry>
  <title type="html"><![CDATA[control android via Emacs]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/dev/2014/10/05/control-android-via-emacs" />
  <id>http://programming4fun.com/blog/dev/2014/10/05/control-android-via-emacs</id>
  <published>2014-10-05T00:00:00+08:00</published>
  <updated>2014-10-05T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
最近一段时间忙得不可开交, 所以没抽出时间来更新博客. 前几个月我入了一个 nexus
7(2013) 用来在挤地铁公交的时候看书. 试用的这段时间很满意, 续航, 屏幕, app 都不错.
加上 &lt;a href=&quot;https://github.com/rovo89/XposedBridge&quot;&gt;xposed framework&lt;/a&gt; 让我更加自如的扩展我的设备, 由于 android 的词典很多都不支持
跨 app 选中取词, 我就用它写了个插件, 读 paper 无压力了.
&lt;/p&gt;

&lt;p&gt;
 题外话完了, 进入正题. 很多时候我会在 n7 上测试代码, 典型的场景就是用 &lt;a href=&quot;https://matt.ucc.asn.au/dropbear/dropbear.html&quot;&gt;dropbear&lt;/a&gt; 开
一个 ssh 服务然后本地电脑连进去. 不过在测试 opengl 代码的时候就很不方便, 每次都要
export display. 后来, 我发现了 &lt;a href=&quot;http://code.google.com/p/wifikeyboard/&quot;&gt;wifi-keyboard&lt;/a&gt;, 一个 android 输入法, 你可以在电脑上
控制 android 的输入, 这样就可以愉快的写代码了. 但是, wifi-keyboard 需要开一个浏览
器, 不方便, 所以我写了个 emacs 插件, 代替浏览器 &amp;#x2013; &lt;a href=&quot;https://github.com/ifree/emacs-wifi-keyboard&quot;&gt;emacs-wifi-keyboard&lt;/a&gt;
. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;p&gt;
现在我介绍一下这个插件. 主用功能有, 
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;在 Emacs 下控制 android 输入
&lt;/li&gt;
&lt;li&gt;通过 Emacs buffer 发送接收文字
&lt;/li&gt;
&lt;li&gt;Keyboard navigation support; 
&lt;/li&gt;
&lt;li&gt;Emacs style key bindings. 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
基本上能用 emacs 来控制 android. 
&lt;/p&gt;

&lt;p&gt;
之前我看过有人写过用 emacs 控制 android 的文章, 主要实现是 intent 交互. 感觉这样
不是太好, 也不方便, 我当时推荐的做法是 accessibility service, 这样确实可以, 但是
不太简洁. 现在如果实现一个输入法, 在输入法激活的状态, 像系统发送按键事件. android 的
可访问性服务能正确处理相应的按键事件, 从而做到用输入法控制 android. 所以通过
wifi-keyboard 你可以用电脑控制的你 android 设备, 移动, 运行 app , 任务切换, 发短
信都不在话下. 
&lt;/p&gt;

&lt;p&gt;
下一步的打算, 移除 wifi-keyboard 的依赖, 直接使用 /dev/uinput 来控制 android 的输
入, 实现起来也很简单, 也省去了切换输入法的步骤. 我准备使用 native executable 的方
式, 安装 apk 也挺麻烦的. 同时使用更加高效的 socket 而不是 http.
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/dev/2014/10/05/control-android-via-emacs&quot;&gt;control android via Emacs&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on October 05, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Introduce to docker]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/dev/2014/08/15/introduce-to-docker" />
  <id>http://programming4fun.com/blog/dev/2014/08/15/introduce-to-docker</id>
  <published>2014-08-15T00:00:00+08:00</published>
  <updated>2014-08-15T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
好吧, 现在每个人都在谈论 docker, 就连公司的后端都开始了解 docker 了. 在公司
monthly meeting 上, 我不小心谈论了一下, 就被选中给大家介绍. 不过我不觉得这是掉坑
里了, 这反而是锻炼我的一次机会. 由于公司游戏开发者居多, 我也没有介绍的太深入, 结
合公司的现状做了些展开. 不过我们游戏前端的接触 docker 肯定不多, 因为关显卡这方面
docker 就没办法了. 下面是 ppt.
&lt;/p&gt;

&lt;p&gt;
&lt;iframe src=&quot;http://www.slideshare.net/ifree0/slideshelf&quot; width=&quot;760px&quot;
height=&quot;570px&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;
style=&quot;border:none;&quot; allowfullscreen webkitallowfullscreen
mozallowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/dev/2014/08/15/introduce-to-docker&quot;&gt;Introduce to docker&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on August 15, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[deobfuscate javascript with emacs]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/dev/2014/06/28/deobfuscate-javascript-with-emacs" />
  <id>http://programming4fun.com/blog/dev/2014/06/28/deobfuscate-javascript-with-emacs</id>
  <published>2014-06-28T00:00:00+08:00</published>
  <updated>2014-06-28T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
javascript 是现在比较流行的脚本语言, 无论是前端, 还是后端都可以见到它的影子.  js
是动态语言, 它会被宿主解释执行. 每次浏览到一些很酷的页面, 我都会好奇的打开
developer console 对它探个究竟. 打开脚本面板然后 pretty print, 通常我都会得到自己
想的结果. 可是, 好奇心不会总是那么容易被满足, 许多网站主可能出于一些目的混淆了自
己的脚本. 我来说说我的解决方案. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;p&gt;
js 不像静态语言,可以编译成机器识别的本地代码, 或者对应 vm 的字节码, 它的源代码是
直接暴露给解释器的. 所以得到 js 的源代码相对静态语言来说, 非常容易. 所以, 只能通
过混淆源代码来增加阅读难度. 通常 js 的混淆方式有这么几种,
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-0-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-0-1&quot;&gt;代码压缩&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-0-1&quot;&gt;
&lt;p&gt;
这个最好解决, 现在有很多代码格式化工具.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-0-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-0-2&quot;&gt;字符拼接&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-0-2&quot;&gt;
&lt;p&gt;
这种比上一种略麻烦, 因为这种代码肉眼一般很难分辨, 一堆 &lt;code&gt;eval&lt;/code&gt; 和 &lt;code&gt;charCodeAt&lt;/code&gt; 之
类的东西&amp;#x2026; 不过这也没什么难的, 用 js 解释器执行代码即可得到结果.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-0-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-0-3&quot;&gt;变量名混淆&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-0-3&quot;&gt;
&lt;p&gt;
这种是最麻烦的情况, 变量名完全被打乱, 字符串也被 unicode 编码和 ascii 编码代替,
肉眼根本无法识别. 现在暂时的解决方案几乎只有人肉.(有好的方法请告诉我!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;解法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
通常, 混淆工具会基于这三种方法扩展出更加复杂的混淆, 不过, 万变不离其宗.这次,
Emacs 不会让我失望, 对于以上三种情况, 我会用 Emacs 一一给出解法. 不过在这之前, 我
先介绍一下几个 Emacs 插件.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://elpa.gnu.org/packages/js2-mode.html&quot;&gt;js2-mode&lt;/a&gt;, 足以匹敌 ide 的模式, 和一般编辑器的做法不同, 它提供 ast 访问, 而不是简
单的正则匹配, 比其他编辑器不知强大多少倍. 具体 feature 见链接. 同时, 推荐一个与之
配套的工具 &lt;a href=&quot;https://github.com/magnars/js2-refactor.el&quot;&gt;js2-refactor&lt;/a&gt;, 提供一些 js 重构相关的功能.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/yasuyk/web-beautify&quot;&gt;web-beautify&lt;/a&gt;, js, html, json 格式化工具. 
&lt;/p&gt;

&lt;p&gt;
好了, 工具介绍完了, 进入正题. 前两种加密方式直接可以用 &lt;b&gt;web-beautify&lt;/b&gt; 解决. 现在
我着重介绍第三种情况的解法. 请看下面代码:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;_0x8ebf&lt;/span&gt;=[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\x53\x61\x79\x48\x65\x6C\x6C\x6F&quot;&lt;/span&gt;,&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\x47\x65\x74\x43\x6F\x75\x6E\x74&quot;&lt;/span&gt;,&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\u6D4B\u8BD5\x4D\x65\x73\x73\x61\x67\x65\x20\x3A\x20&quot;&lt;/span&gt;,&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\x59\x6F\x75\x20\x61\x72\x65\x20\x77\x65\x6C\x63\x6F\x6D\x65\x2E&quot;&lt;/span&gt;]
&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;_0x8ec0&lt;/span&gt;(&lt;span style=&quot;color: #eedd82;&quot;&gt;_0xbd81x2&lt;/span&gt;)
{
        &lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;_0xbd81x3&lt;/span&gt;=0;
        &lt;span style=&quot;color: #7fffd4;&quot;&gt;this&lt;/span&gt;[_0x8ebf[0]]=&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; (&lt;span style=&quot;color: #eedd82;&quot;&gt;_0xbd81x4&lt;/span&gt;)
        {
                _0xbd81x3++;
                alert(_0xbd81x2+_0xbd81x4);
        }
        ;
        &lt;span style=&quot;color: #7fffd4;&quot;&gt;this&lt;/span&gt;[_0x8ebf[1]]=&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; ()
        {
                &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; _0xbd81x3;
        }
        ;
}
;
&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;_0x8ec1&lt;/span&gt;= &lt;span style=&quot;color: #00ffff;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #98fb98;&quot;&gt;_0x8ec0&lt;/span&gt;(_0x8ebf[2]);
_0x8ec1[_0x8ebf[0]](_0x8ebf[3]);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
这种情况粗看是无法知道这段代码的意义的. 所以, 现在祭出 Emacs, 让它来解决. 第一步,
解码字符串. 
&lt;/p&gt;

&lt;p&gt;
&lt;script src=&quot;https://gist.github.com/ifree/55bc4c877cc09f44d0f5.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;
结果
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;_0x8ebf&lt;/span&gt;=[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SayHello&quot;&lt;/span&gt;,&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;GetCount&quot;&lt;/span&gt;,&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&amp;#27979;&amp;#35797; : &quot;&lt;/span&gt;,&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;You are welcome.&quot;&lt;/span&gt;]
&lt;span style=&quot;color: #ff4500;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;rest content....&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
第二步, remap 数组里的字符串到实际变量.
&lt;/p&gt;

&lt;p&gt;
&lt;script src=&quot;https://gist.github.com/ifree/dd6a94b3a369a4b07ba6.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;script src=&quot;https://gist.github.com/ifree/eb034ef34f5aa957e897.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;
结果
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;_0x8ec0&lt;/span&gt;(&lt;span style=&quot;color: #eedd82;&quot;&gt;_0xbd81x2&lt;/span&gt;)
{
        &lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;_0xbd81x3&lt;/span&gt;=0;
        &lt;span style=&quot;color: #7fffd4;&quot;&gt;this&lt;/span&gt;[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SayHello&quot;&lt;/span&gt;]=&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; (&lt;span style=&quot;color: #eedd82;&quot;&gt;_0xbd81x4&lt;/span&gt;)
        {
                _0xbd81x3++;
                alert(_0xbd81x2+_0xbd81x4);
        }
        ;
        &lt;span style=&quot;color: #7fffd4;&quot;&gt;this&lt;/span&gt;[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;GetCount&quot;&lt;/span&gt;]=&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; ()
        {
                &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; _0xbd81x3;
        }
        ;
}
;
&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;_0x8ec1&lt;/span&gt;= &lt;span style=&quot;color: #00ffff;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #98fb98;&quot;&gt;_0x8ec0&lt;/span&gt;(&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&amp;#27979;&amp;#35797; : &quot;&lt;/span&gt;);
_0x8ec1[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SayHello&quot;&lt;/span&gt;](&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;You are welcome.&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
到此, 已经可以大概得出这段 js 的意义, 剩下的把无意义的变量名根据上下文改正(体
力活&amp;#x2026;.)
&lt;/p&gt;

&lt;p&gt;
&lt;script src=&quot;https://gist.github.com/ifree/01d80f178e3d877efde7.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;Greeter&lt;/span&gt;(&lt;span style=&quot;color: #eedd82;&quot;&gt;who&lt;/span&gt;)
{
        &lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;count&lt;/span&gt;=0;
        &lt;span style=&quot;color: #7fffd4;&quot;&gt;this&lt;/span&gt;[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SayHello&quot;&lt;/span&gt;]=&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; (&lt;span style=&quot;color: #eedd82;&quot;&gt;content&lt;/span&gt;)
        {
                count++;
                alert(who+content);
        }
        ;
        &lt;span style=&quot;color: #7fffd4;&quot;&gt;this&lt;/span&gt;[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;GetCount&quot;&lt;/span&gt;]=&lt;span style=&quot;color: #00ffff;&quot;&gt;function&lt;/span&gt; ()
        {
                &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; count;
        }
        ;
}
;
&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #eedd82;&quot;&gt;greeter&lt;/span&gt;= &lt;span style=&quot;color: #00ffff;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #98fb98;&quot;&gt;Greeter&lt;/span&gt;(&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&amp;#27979;&amp;#35797; : &quot;&lt;/span&gt;);
greeter[&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SayHello&quot;&lt;/span&gt;](&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;You are welcome.&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
大功告成!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/dev/2014/06/28/deobfuscate-javascript-with-emacs&quot;&gt;deobfuscate javascript with emacs&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on June 28, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[emacs as doubanfm client]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/emacs/firefox-plugin/2014/03/27/fm-emacs-client" />
  <id>http://programming4fun.com/blog/emacs/firefox-plugin/2014/03/27/fm-emacs-client</id>
  <published>2014-03-27T00:00:00+08:00</published>
  <updated>2014-03-27T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
晚上写东西喜欢听点小曲儿, 给自己放松放松. 我不太喜欢下载音乐, 更倾向于在线的形式,
这样选择更多, 让我这种拖延症患者不至于听腻了没时间换. 所以 doubanfm 是个很好的选
择. 
&lt;/p&gt;

&lt;p&gt;
之前给 firefox 写了个 doubanfm html5 播放器, 用来解决 flash 插件耗电耗 cpu 的问题.
为了能让我的 doubanfm 得到更好的锻炼, 让机器学习的结果更加接近我的喜好, 我需要在
doubanfm 网站上做一些交互(跳过, 喜欢之类的). 这样我在遇到不喜欢的歌曲就需要我停下
手上的事情去切歌, 或者在思考的时候暂停. 这样太影响效率, 所以昨天晚上我停下手头上
的事情把这个东西写好了. (果然, 在拖延症面前, 其他小事都比当前的事重要 orz) 由于我
的主要开发工具是 emacs, 所以我就写了 emacs 插件. firefox 也是我的首选浏览器, 自由
度高, 足够开放, 可以各种 hack, 所以我也写了 ff 的插件, 主要方便我在其他 tab 中直
接切换歌曲而不用手动切到 doubanfm 的 tab. 
&lt;/p&gt;

&lt;p&gt;
这完全是写着玩的, 大概介绍一下. 项目地址: &lt;a href=&quot;https://github.com/ifree/douban-ff.git&quot;&gt;https://github.com/ifree/douban-ff.git&lt;/a&gt;
&lt;!-- break --&gt;  
&lt;/p&gt;

&lt;p&gt;
你可能想知道 emacs 是如何与 firefox 交互的吧. 我用了一个插件 &lt;a href=&quot;https://github.com/bard/mozrepl&quot;&gt;moz-repl&lt;/a&gt;, 其内部会创
建一个 &lt;code&gt;server_socket&lt;/code&gt; 对象来处理请求, 把接收到的请求作为 js 脚本执行, 所以
emacs 只需要向它发送 js 脚本就可以完成执行操作. moz-repl 其实也是一个 ff 插件开发
利器. 再贴一点具体实现的代码, 如下:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;send-to-ff&lt;/span&gt; &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;content&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;send js to firefox to execute&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;comint-send-string &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;inferior-moz-process&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      content
                      &lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;ff-exec-script-in-tabs&lt;/span&gt; &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;script url-regex&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt; 
&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;script injection&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;send-to-ff
   &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;format &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ffc0cb; font-weight: bold;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;function(script,u){&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;        [].forEach.call(gBrowser.tabs,function(itm){&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;            var ctab=itm.linkedBrowser;&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;            if(ctab.contentDocument.location.host.match(u)){&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;                var s=ctab.contentDocument.createElement(&#39;script&#39;)&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;                s.textContent=script;&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;                ctab.contentDocument.body.appendChild(s);&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;            }&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;        });        &lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;    })(\&quot;%s\&quot;,\&quot;%s\&quot;);&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&lt;/span&gt;
script url-regex
&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
   &lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;fm-skip&lt;/span&gt; &lt;span style=&quot;color: #93a8c6;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;interactive&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;fm-exec &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;DBR.act(&#39;skip&#39;)&quot;&lt;/span&gt;&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #87cefa;&quot;&gt;fm-copy-song&lt;/span&gt; &lt;span style=&quot;color: #93a8c6;&quot;&gt;()&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;interactive&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;fm-exec &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;document.title=FM.getCurrentSongInfo().url&quot;&lt;/span&gt;&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;send-to-ff &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ffc0cb; font-weight: bold;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;].forEach.call(gBrowser.tabs,function(itm){&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;            var ctab=itm.linkedBrowser;&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;            if(ctab.contentDocument.location.host.match(&#39;douban\.fm&#39;)){&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;                Components.classes[&#39;@mozilla.org/widget/clipboardhelper;1&#39;]&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;                .getService(Components.interfaces.nsIClipboardHelper)&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;                .copyString(ctab.contentTitle);&lt;/span&gt;
&lt;span style=&quot;color: #ffa07a;&quot;&gt;            }});&quot;&lt;/span&gt;
&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
关键点就在如何向 firefox 的某个 tab 注入代码, 很简单, 动态构建 script. 
&lt;/p&gt;


&lt;p&gt;
好了, 工具也写好了, 继续做事 :&amp;gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/emacs/firefox-plugin/2014/03/27/fm-emacs-client&quot;&gt;emacs as doubanfm client&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on March 27, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[breakpad on android]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/android/dev/2014/02/13/breakpad-on-android" />
  <id>http://programming4fun.com/blog/android/dev/2014/02/13/breakpad-on-android</id>
  <published>2014-02-13T00:00:00+08:00</published>
  <updated>2014-02-13T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
最近给项目集成了 &lt;a href=&quot;https://code.google.com/p/google-breakpad&quot;&gt;breakpad&lt;/a&gt;, 一款开源 crash report 系统. 对 crash 捕获, dump 数据生
成, dump 文件分析, 还有 dump 文件上传,都有很好的支持. 据我所知, firefox,
chromium 等项目都集成了它. 从官方文档上看, 此项目对 linux 的支持也只是有限,
android 的话就更有限了. 不过即便是有限的支持, 对于我们的项目来说已经足够了. 现在
我来介绍一下我的经验. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;breakpad 介绍&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
其实说到这里, 你应该也大概知道 Breakpad 是什么东西了, 他是一个跨平台的 crash
report system. 
&lt;/p&gt;

&lt;p&gt;
现代的操作系统能良好的隔离每个程序的内存空间. 如果一个程序崩溃了,操作系统同样正常
运行. 各个平台有独自的程序生命周期管理. 拿 linux 来说, 如果一个程序胡作非为, 操作
系统看不下去了便给他一个信号eg. SIGKILL. 那意味着它就死了. 这时操作系统就像一个末
日审判让你无法与他对抗. 扯远了, 其实主要操作就是 handle 程序crash 的信号, 然后生
成平台无关的 dump 文件. 有了这个 dump 文件, 你就可以对分析,改进自己的程序. 正好
android 内核也是 linux, 那么 breakpad 在 android 下同样可以工作.
&lt;/p&gt;

&lt;p&gt;
Breakpad 还有 dump 文件解析功能, 同时提供了 &lt;code&gt;minidump_stackwalk&lt;/code&gt; 这个工具来分析
dump 文件.  &lt;code&gt;minidump_stackwalk&lt;/code&gt; 能结合程序的 symbol 文件打印出程序 crash 时的详细
调用堆栈, 这对分析,调试有很大帮助.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;集成过程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
从源码 checkout 之后,我就准备了两种解决方案, 一种是编进我们的的代码. 另一种是在
andoird 下直接运行 &lt;code&gt;minidump_stackwalk&lt;/code&gt;. 由于我们项目内存管理的复杂性和性能需要, 没
有链接部分 breakpad 的库且编译选项有冲突, 再加上我们项目的内存管理方式等因素, 让
我放弃了集成 breakpad 代码到项目中的想法. 于是我就又交叉编译了
&lt;code&gt;minidump_stackwalk&lt;/code&gt;. 项目已经开源, 地址:
&lt;a href=&quot;https://github.com/ifree/Breakpad-android&quot;&gt;https://github.com/ifree/Breakpad-android&lt;/a&gt; .
&lt;/p&gt;

&lt;p&gt;
项目依赖 google-breakpad 请移步项目 svn 检出最新源码. &lt;code&gt;tools/android.patch&lt;/code&gt; 是我
对 breakpad 做出的改动.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;交叉编译&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
如果需要交叉编译 &lt;code&gt;minidump_stackwalk&lt;/code&gt; 请看 &lt;code&gt;tools/ndk-configure.sh&lt;/code&gt;, 只需指定
ndk 路径, 处理器架构. 编译之前检查下脚本, 以防万一.
&lt;/p&gt;

&lt;p&gt;
编译完成你应该能得到 &lt;code&gt;$google-breakpad-path/src/processor/minidump_stackwalk&lt;/code&gt;,我也
编译好了一个, 你可以直接使用. 不过有一点需要补充, 这是修改版的
&lt;code&gt;minidump_stackwalk&lt;/code&gt;. 使用示例参见 &lt;code&gt;com.ifree.breakpad.BreakpadAgent&lt;/code&gt;, 原理是使用
java 执行 &lt;code&gt;minidump_stackwalk&lt;/code&gt; , 并读取输出流.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;集成代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
关于集成代码, 参见 BreakpadAgent.java 方法 &lt;code&gt;public native void
getBacktrace(String dumpFile,String symbolPath);&lt;/code&gt;, 本地主要实现
&lt;code&gt;jni/BreakpadAgent.cpp&lt;/code&gt;. 代码量没有多少.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;ls ~/Dev/projects/Breakpad-android/jni
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
你可能需要注意这些东西:
&lt;/p&gt;

&lt;p&gt;
复制 &lt;code&gt;tools/Android_processor.mk&lt;/code&gt; 到
&lt;code&gt;$google-breakpad-path/android/google_breakpad/Android_processor.mk&lt;/code&gt; 并在项目 mk
文件中 include 它, 具体例子参看 &lt;code&gt;jni/android.mk&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
请看 BreakpadHelper 的方法 &lt;code&gt;bool backtrace(const char*,const
char*,File_exists_handler,File_read_handler,Free_memory_handler)&lt;/code&gt; 如果这三个
handler 为空的话, 会尝试读取 sd 卡上的 symbol 文件, 在 BreakpadAgent.cpp 中, 我实
现了 ndk 对 android assets 目录资源的读取, 如果你想项目没有什么特殊需求的话, 推荐
用它们.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;遇到的坑&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
android 中, jni 只允许创建一个 jvm, 且不能共享 JNIEnv, 必须共享 JVM.
&lt;/p&gt;

&lt;p&gt;
java 的泛型擦除与 jni. jni 在调用 java 方法时, 需要指定方法,类签名, 但是泛型会被
擦除, 在 jvm 下, 泛型是个幌子而已, 具体请看 core java v7 vol1 中关于泛型的描述.
&lt;/p&gt;

&lt;p&gt;
编译项目 jni 目录之外的文件. 这个说来话长, &lt;code&gt;ndk-build&lt;/code&gt; 会根据当前 &lt;code&gt;LOCAL_PATH&lt;/code&gt; 来
搜索文件, 所以经常会遇到各种错误. 需要重设 &lt;code&gt;LOCAL-PATH&lt;/code&gt; 来解决, 但是如果项目过于
复杂, 这种方法不可取. 简单的方法是 新建 mk 文件, 参考我的 &lt;code&gt;Android_processor.mk&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
android 创建进程时, 如果进程有大量的输出流发送到 &lt;code&gt;stdout&lt;/code&gt; 的话, 会造成 android 挂
起. 解决办法是, 读取进程的输出流.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
匆忙的整理完这个工具, 没有太详细的注释, 不过代码应该还是清晰的, 具体使用方法也可
以看测试 app. 希望能对你有所帮助. 有问题或者 bug 欢迎给我 issue.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/android/dev/2014/02/13/breakpad-on-android&quot;&gt;breakpad on android&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on February 13, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[doubanfm html5]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/dev/2014/01/21/doubanfm-html5" />
  <id>http://programming4fun.com/blog/dev/2014/01/21/doubanfm-html5</id>
  <published>2014-01-21T00:00:00+08:00</published>
  <updated>2014-01-21T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
大家都知道 flash player 在 *nix 平台上的表现有多糟, 一打开 douban fm 风扇就开始狂
转, 这阵势就像要把我 CPU 献祭一样, 我是不能容忍它的. 于是, 我造了这个轮子&amp;#x2013; 写了
dobanfm 的 html5 版. &lt;a href=&quot;https://github.com/ifree/doubanfm-html5&quot;&gt;项目地址&lt;/a&gt;, &lt;a href=&quot;http://userscripts.org/scripts/show/292624&quot;&gt;userscript&lt;/a&gt; . 下面是我这个业余 js 开发人员的一些开
发记录. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;js 开发环境配置&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
首先, 这个配置是基于我的默认编辑器 emacs 的, 所以肯定有一些读者没有考虑到(也许我
的博客根本没人看,笑)
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;major-mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Js2Mode&quot;&gt;js2-mode&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
emacs 自带了 javascript-mode , 这个模式提供了主要的语法高亮和基本的缩进. 用来看代
码是足够了. 如果想更畅快的编辑写代码, 推荐使用 js2-mode . 它可是算是最好的
javascript 模式了. js 1.5 - 1.8 都支持, 而且支持 &lt;a href=&quot;http://en.wikipedia.org/wiki/ECMAScript_for_XML&quot;&gt;e4x&lt;/a&gt; , 代码折叠, 也有更智能的缩
进. 还有很多 feature 没有介绍, 就留给你来发掘了. 
&lt;/p&gt;

&lt;p&gt;
如果你是 &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; 开发者的话, 可以考虑 &lt;a href=&quot;https://github.com/thomblake/js3-mode&quot;&gt;js3-mode&lt;/a&gt; , 兼容 js2-mode, 同时提供 &lt;a href=&quot;https://github.com/npm/npm/blob/master/doc/misc/npm-coding-style.md&quot;&gt;npm-styl&lt;/a&gt;e 支
持. npm-style 看起来确实不错, 但是我不是专职的 js 开发人员, 所以还是照
&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml&quot;&gt;google-js-style&lt;/a&gt; 来吧.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;minor-mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Yasnippet&quot;&gt;yasnippets&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
主流的 IDE 都会有代码段自动补全功能, emacs 自然不会落下. yasnippets 就是emacs 下
的一个强大的补全工具, 代码段模板兼容 TextMate 的模板语法.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Flycheck&quot;&gt;flycheck&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
这是 emacs 上取代 flymake 的一个实时代码检查工具 (check your code on the fly). 配
合 &lt;a href=&quot;http://en.wikipedia.org/wiki/JSLint&quot;&gt;jslint&lt;/a&gt; 可以随时让我知道那里的代码有问题, 减少调试时间. jslint 是 js 开发者必不
可少的代码规范检查工具, 大家使用 jslint 一般可能会用 make file (现在一般用 &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;) 定义一个 lint 的
target, 这个属于 post checking. flycheck 则可以让你做到 realtime checking, 多爽!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/Projectile&quot;&gt;projectile&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;p&gt;
作为一个轻量的项目文件管理工具, projectile 是我最喜欢用的. 没有第三方依赖, 提供大
部分项目文件管理功能: 浏览, 快速查找, 最近使用文件列表, 文件跳转, 项目切换, 项目
tags 文件生成,等. 如果你的需求更加复杂, 请移步 &lt;a href=&quot;http://www.emacswiki.org/emacs/EmacsCodeBrowser&quot;&gt;ECB&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-4&quot;&gt;&lt;a href=&quot;http://www.emacswiki.org/emacs/AutoComplete&quot;&gt;AutoComplete&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-4&quot;&gt;
&lt;p&gt;
自动补全功能是现代 IDE 的一大杀器, 通过静态分析, 语法树解析, tags等手段来补全代码
让程序员的效率大大提升. AutoComplete 模式可以利用 js2 的语法上下文来补全, 也可以
根据当前关键字来补全, 这样让 emacs 一点也不逊色与那些 IDE 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-5&quot;&gt;&lt;a href=&quot;https://github.com/skeeto/skewer-mode&quot;&gt;skewer&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-5&quot;&gt;
&lt;p&gt;
最后献上必杀技 skewer-mode , 它简直就是为 javascript 快速开发的而生的. 真是即写即
所得. 它通过 &lt;a href=&quot;https://github.com/skeeto/emacs-http-server&quot;&gt;simple-httpd&lt;/a&gt; 做后端并使用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Comet_%2528programming%2529&quot;&gt;comet&lt;/a&gt; 技术来进行 http 长连接实现推送
代码到浏览器并获得执行结果. 所以, 你在写代码的时候可以立即验证自己的代码. 想了解
更多 comet 可以看看我以前翻译的&lt;a href=&quot;http://ifree.is-programmer.com/2010/11/2/websockets_everywhere_with_socket-io.22344.html&quot;&gt;文章&lt;/a&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;js 代码风格,注意事项&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
一般我的代码会通过 flycheck 和 jslint 配合, 所以风格应该不会有太大的问题. 现在说
说 jslint 吧. 就像c &lt;a href=&quot;http://en.wikipedia.org/wiki/Lint_%2528software%2529&quot;&gt;lint&lt;/a&gt; 一样这是一种代码风格检查工具. 它会发现你代码的潜在漏洞,
让你不至于写出太多漏洞的代码. 不过需要提到的是, lint 虽好, 自己没有写好代码的意识
的话, 没用. jslint 的规则主要参照&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;这里&lt;/a&gt; 的代码约定. 可能有时候你可能觉得它太严格了.
没问题, 你可以让它容忍一些代码风格. 其他的介绍看&lt;a href=&quot;http://www.jslint.com/lint.html&quot;&gt;这里&lt;/a&gt; . 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;svg 相关&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
从源码看你知道 UI 部分是用 &lt;a href=&quot;http://en.wikipedia.org/wiki/Scalable_Vector_Graphics&quot;&gt;svg&lt;/a&gt; 画的, 作为一个 web UI 门外汉来说, svg/&lt;a href=&quot;http://en.wikipedia.org/wiki/Vector_Markup_Language&quot;&gt;vml&lt;/a&gt; 无疑解救
了我. 以前我还用 IE 的时候知道了 vml , 对这种不用关心各种怪异的 css/js bug,直接用
xml 来描述的语言真是很向往,进而流连于各种 vml webart 中.后来 vml 过时了,哈哈. 取
而代之的是 svg, webkit 系, netscape 系的都有很好的支持, 所以大概了解了一下. 你可
以把他们看作是一种图形描述语言. 因为可以描述, 所以无论怎么缩放图像质量也不会变差.
我通过 &lt;a href=&quot;http://en.wikipedia.org/wiki/Inkscape&quot;&gt;inkspace&lt;/a&gt; 照这 doubamfm 拖了个大概, 然后用 javascript 访问其 dom, 很像
html 的 dom, 所以代码写起来也不是很麻烦. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;总结&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
这个项目是我利用业余时间写好的, 花了两个晚上, 用 inkscape 画界面是最折腾我的,
Orz. 其余时间就是看 web audio 文档, 和研究 douban 协议. 我没有实现 volume
control 是因为那东西比较难画, 功能实现不是太难. 还有一个就是登陆, 我也不想画界面
了, 如果谁想忙帮的话, 欢迎 pull request. 另外就是 vip 用户的功能, 我没有开通
vip, 所以没时间研究. 有什么问题的话也可以直接在项目上开 issue.
&lt;/p&gt;

&lt;p&gt;
匆匆忙忙写好了这篇博文. 还是再说几句. 日常开发时, 要对自己的要求稍微严格一点. 对
于工具要善于利用, 对于本来时间就不多的大家来说这是很宝贵的. 做好项目计划, 不管是
正式项目还是业余项目, 细分目标. 如果像以前, 这个项目不知道又要到何年何月才写的
完&amp;#x2026; 好了,洗洗睡了.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/dev/2014/01/21/doubanfm-html5&quot;&gt;doubanfm html5&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on January 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GTD with org-mode]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/emacs/2014/01/08/gtd-with-org" />
  <id>http://programming4fun.com/blog/emacs/2014/01/08/gtd-with-org</id>
  <published>2014-01-08T00:00:00+08:00</published>
  <updated>2014-01-08T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
随着工作越来越忙,平常的琐事越来越多,我发现,制订计划的需求就越来越高.现
在网络上有许多 GTD 工具, 我也陆续使用过一些,比如说 anydo, remember the
milk&amp;#x2026; 最后我都放弃了. 他们之中, 也不乏亮点, 可是对我来说最大的硬伤就
是粘度不高. 我不可能一直记得来打开这些应用, 大脑在频繁的任务切换下也不
会有太高的效率. 由于我的主要工作环境是 emacs, 它几乎常驻在于我这个用户
的session 里, 于是, 在去年我开始在 emacs 的 org-mode 下做 GTD. 一直到现
在, org-mode 帮助我完成了一个又一个目标, 我现在把自己的一些心得分享一下,
希望能帮助到你. &lt;!-- break --&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;org-mode 介绍&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
org-mode 是 emacs 下的一个纯文本模式. 由于高度自由且容易扩展, 可以用作
TODO list, 项目计划工具, 写作工具等等. 通常我用它来写文档,记笔记,做计划,
还有就是写博客. 
&lt;/p&gt;

&lt;p&gt;
现在我介绍一些 org-mode 的基础知识,以便你能快速入门, 想要更深入的了解,
多看看&lt;a href=&quot;http://orgmode.org/#docs&quot;&gt;文档&lt;/a&gt;吧, org-mode 的文档还是比较丰富的.  
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;基本操作&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
为了更高效的编辑 org 文件, 请忘掉你的鼠标, 避免工具的切换浪费时间.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;heading 相关&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;键位&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-&amp;lt;left&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;插入一个同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;插入一个非同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-&amp;lt;let&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;增加当前 heading 的级别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-&amp;lt;right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;减少当前 heading 的级别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-s-&amp;lt;left&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;增加当前 heading 及其子项的级别&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-s-&amp;lt;right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;减少当前 heading 及其子项的级别&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;移动&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;键位&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-p&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到上一个 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-n&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到下一个 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-f&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到上一个同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-b&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到下一个同级 heading&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-u&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;移动到上一级 heading&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;code&gt;TODO&lt;/code&gt; 相关&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;键位&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-t&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使一个 heading 成为 TODO&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;s-&amp;lt;left&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切换当前 TODO 项到下一个状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;s-&amp;lt;right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切换当前 TODO 项到上一个状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&lt;code&gt;S-M-&amp;lt;ret&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;添加一个 TODO 项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;用 org-mode 来做 GTD&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
上面就是我经常用到的 org-mode 命令, 现在我们说说我平时是怎么做 GTD 的.
我把我每天要做的事情分成几类, 工作, 生活, 学习, 和一个优先级最高, 或者
马上可以完成的类型 (today.org). 目录结构大致如下:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;directory-files &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;~/Dev/org/plan&quot;&lt;/span&gt; t &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\.org$&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;/home/ifree/Dev/org/plan/dev.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/home/ifree/Dev/org/plan/math.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/home/ifree/Dev/org/plan/personal.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/home/ifree/Dev/org/plan/reading.org&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;/home/ifree/Dev/org/plan/today.org&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
为了方便查找, 统计, 我用到了 TODO 关键字和 tag 来分类, 这让我很容易就能
定位到具体任务. 你可以看到, 任务关键字我分了3类 普通任务, coding 和任务
状态,关键字也进行了分组, 你可以根据自己的喜好或者计划来定制它.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;org-todo-keywords&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;setq org-todo-keywords
      &lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;quote &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;TODO(t)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;STARTED(s)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;DONE(d!/!)&quot;&lt;/span&gt; &lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;general tasks&lt;/span&gt;
              &lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CODING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;TESING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REFACTOR(!/@)&quot;&lt;/span&gt;  &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REVIEW(/@)&quot;&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;coding&lt;/span&gt;
              &lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;WAITING(w@/!)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;SOMEDAY(S)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;PROJECT&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;DELEGATED(@/)&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CANCELLED(c@/!)&quot;&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ff4500;&quot;&gt;task states&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;org-tag-alist&lt;/code&gt; :
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;setq org-tag-alist &#39;&lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;:startgroup&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;@work&quot;&lt;/span&gt; . ?w&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt; 
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;@home&quot;&lt;/span&gt; . ?h&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;@coffee shop&quot;&lt;/span&gt; . ?t&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;:endgroup&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;:startgroup&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;laptop&quot;&lt;/span&gt; . ?l&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;pc&quot;&lt;/span&gt; . ?p&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;phone&quot;&lt;/span&gt; .?P&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;:endgroup&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;:startgroup&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;dev&quot;&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;personal&quot;&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;blog&quot;&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;thought&quot;&lt;/span&gt; .nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;:endgroup&lt;/span&gt; . nil&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
                      &lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
读到了这里, 你可能会想, 这是很基本的 GTD 功能啊, 我凭什么用 org-mode !
别急, 我现在介绍两个杀手级的 feature, 保证让你爱不释手. 
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;agenda view&lt;/b&gt; 相当于是一个灵活的统计,图表工具, 可以非常灵活的定制, . 来看
看我的配置,大致有3个功能. 你可以根据需要, 自己加, 记住 &lt;b&gt;RTFM&lt;/b&gt;.
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;查看今天需要完成的任务
&lt;/li&gt;
&lt;li&gt;没有完成的任务
&lt;/li&gt;
&lt;li&gt;存档的任务
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;setq org-agenda-custom-commands
      &#39;&lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;c&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;things I should today&quot;&lt;/span&gt; alltodo &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&quot;&lt;/span&gt;
         &lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aebed8;&quot;&gt;(&lt;/span&gt;org-agenda-overriding-header &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;Hey man, you need finish these today!&quot;&lt;/span&gt;&lt;span style=&quot;color: #aebed8;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aebed8;&quot;&gt;(&lt;/span&gt;org-agenda-files &#39;&lt;span style=&quot;color: #b0b0b3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;~/Dev/org/plan/today.org&quot;&lt;/span&gt;&lt;span style=&quot;color: #b0b0b3;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aebed8;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;p&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;pending todo&quot;&lt;/span&gt; todo &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;WAITING|SOMEDAY&quot;&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;view archieved task&quot;&lt;/span&gt; todo &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CANCELLED|DELEGATED|DONE&quot;&lt;/span&gt;
         &lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aebed8;&quot;&gt;(&lt;/span&gt;org-agenda-files &lt;span style=&quot;color: #b0b0b3;&quot;&gt;(&lt;/span&gt;directory-files-rec &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;~/Dev/org&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;\.archive$&quot;&lt;/span&gt;&lt;span style=&quot;color: #b0b0b3;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aebed8;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
除了灵活的统计视图, org-mode 还能让你快速的记录自己任务, 当然, 这不限于
任务, 也可以是偶然获得的灵感, 事件记录等. 这便是 &lt;code&gt;org-capture&lt;/code&gt; 功能. 同时也贴上我的配置:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;setq org-capture-templates
      &#39;&lt;span style=&quot;color: #93a8c6;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;t&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;Today&#39;s TODO&quot;&lt;/span&gt; entry &lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;file+headline org-default-notes-file &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;&amp;#27599;&amp;#26085;TODO!&quot;&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;** TODO %?\n %i\n %T&quot;&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;
        &lt;span style=&quot;color: #b0b1a3;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;T&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;Thoughts&quot;&lt;/span&gt; entry 
         &lt;span style=&quot;color: #97b098;&quot;&gt;(&lt;/span&gt;file+headline &lt;span style=&quot;color: #aebed8;&quot;&gt;(&lt;/span&gt;concat org-directory &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;/plan/personal.org&quot;&lt;/span&gt; &lt;span style=&quot;color: #aebed8;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;random thoughts&quot;&lt;/span&gt;&lt;span style=&quot;color: #97b098;&quot;&gt;)&lt;/span&gt;
         &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;** %?\n %i\n %T&quot;&lt;/span&gt;&lt;span style=&quot;color: #b0b1a3;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #93a8c6;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;彩蛋!&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
以上就是 org-mode 做 GTD 的基本配置, 我来说说我发现的彩蛋吧, 很方便. 
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;task change logging
任务状态改变之后( TODO -&amp;gt; DELEGATED), 你可以加上一个时间戳或者加一段note
看下面  &lt;code&gt;!&lt;/code&gt; 就是时间戳, &lt;code&gt;@&lt;/code&gt; 就是note. &lt;code&gt;/&lt;/code&gt; 来区分状态的前后.

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;(&lt;/span&gt;sequence &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;CODING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;TESING&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REFACTOR(!/@)&quot;&lt;/span&gt;  &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;REVIEW(/@)&quot;&lt;/span&gt;&lt;span style=&quot;color: #8c8c8c;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;checkboxes
&lt;code&gt;M-S-&amp;lt;RET&amp;gt;&lt;/code&gt; 插入 checkbox
&lt;/li&gt;
&lt;li&gt;archive 
&lt;code&gt;C-c C-x C-s&lt;/code&gt; 存档当前条目
&lt;/li&gt;
&lt;li&gt;agenda view
&lt;code&gt;M-x org-agenda&lt;/code&gt; 一般绑定键位为 &lt;code&gt;C-a a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;priorities
每个 TODO 都可以设置优先级 快捷键 &lt;code&gt;S-&amp;lt;UP&amp;gt;&lt;/code&gt; &lt;code&gt;S-&amp;lt;DOWN&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;deadline, schedule &amp;#x2026;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
先这么多吧, 够你看一会的了. 用 emacs 不需要死记硬背, 这些 tricks 你会慢
慢知道的. 记住, tricks 不是银弹.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;后记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
工具再好, 缺乏执行力也是徒劳. 工具的作用是辅助你来完成计划, 需要你的主
观能动配合, 如果这一步都迈不出去的话, 洗洗睡吧.
&lt;/p&gt;

&lt;p&gt;
祝你战胜自己!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/emacs/2014/01/08/gtd-with-org&quot;&gt;GTD with org-mode&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on January 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[New Start]]></title>
  <link rel="alternate" type="text/html" href="http://programming4fun.com/blog/daily/2013/12/24/new-start" />
  <id>http://programming4fun.com/blog/daily/2013/12/24/new-start</id>
  <published>2013-12-24T00:00:00+08:00</published>
  <updated>2013-12-24T00:00:00+08:00</updated>
  <author>
    <name>Frei Zhang</name>
    <uri>http://programming4fun.com</uri>
  </author>
  <content type="html">&lt;p&gt;
在挣扎了许久之后,我终于又重建了博客. 在这之前,我尝试过 &lt;a href=&quot;http://ifree.is-programmer.com&quot;&gt;is-programmer&lt;/a&gt;,
&lt;a href=&quot;http://ifree.cnblogs.com/&quot;&gt;cnblogs&lt;/a&gt;, 但是最后统统烂尾. 中断博客的原因是因为我觉得自己胸无点墨, 写作
技能又笨拙, 继续写下去很丢面子. 进而选择了本地博客,本地 wiki 来做笔记,
记录思想. 可是在一次意外中, 由于我的疏忽, 丢失了硬盘的所有资料. 我开始
尝试一些云端解决方案, 比如 dropbox, evernote, gdrive, 加上这两年痴迷于
emacs, 所以我用 emacs 的 org-mode 来做日常的记录, 通过 dropbox 同步. 再
后来, 也就是现在, 我决定摆脱伸手党这个称谓, 把自己的思考和别人分享, 接
受批评, 共同进步.&lt;!-- break --&gt;
&lt;/p&gt;

&lt;p&gt;
本博客是基于 jekyll 静态博客, 使用 &lt;a href=&quot;https://github.com/ColeTownsend/Balzac-for-Jekyll&quot;&gt;BALZAC&lt;/a&gt; theme 并做了一些小修改. 博
客内容主要是游戏编程,c/c++ , unix like system, emacs 和函数式编程相关的
内容. 
&lt;/p&gt;

&lt;p&gt;
2013年就要过去, 希望在新的一年里活的开心!
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://programming4fun.com/blog/daily/2013/12/24/new-start&quot;&gt;New Start&lt;/a&gt; was originally published by Frei Zhang at &lt;a href=&quot;http://programming4fun.com&quot;&gt;Programming for fun!&lt;/a&gt; on December 24, 2013.&lt;/p&gt;</content>
</entry>

</feed>
